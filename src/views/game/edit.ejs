<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4"><%= game.title %></h1>
            <p class="lead">
                Game PIN: <span class="game-pin"><%= game.pin %></span>
            </p>
        </div>
        <div class="col-auto align-self-center">
            <div class="btn-group">
                <a href="/game/host/<%= game.pin %>" class="btn btn-success btn-lg">
                    <i class="fas fa-play"></i> Start Game
                </a>
                <a href="/game/dashboard" class="btn btn-outline-secondary btn-lg">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <!-- Questions List -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">Questions</h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addQuestionModal">
                        <i class="fas fa-plus"></i> Add Question
                    </button>
                </div>
                <div class="card-body">
                    <% if (questions && questions.length > 0) { %>
                        <div class="list-group">
                            <% questions.forEach((question, index) => { %>
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between align-items-center">
                                        <h5 class="mb-1">
                                            <span class="badge bg-secondary me-2">#<%= index + 1 %></span>
                                            <%= question.content %>
                                        </h5>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-outline-primary btn-sm edit-question"
                                                    data-question-id="<%= question.id %>"
                                                    data-content="<%= question.content %>"
                                                    data-correct="<%= question.correct_answer %>"
                                                    data-incorrect="<%= JSON.stringify(question.incorrect_answers) %>"
                                                    data-time="<%= question.time_limit %>"
                                                    data-points="<%= question.points %>">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm delete-question"
                                                    data-question-id="<%= question.id %>">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="mb-1">
                                        <span class="text-success">
                                            <i class="fas fa-check"></i> <%= question.correct_answer %>
                                        </span>
                                    </p>
                                    <small>
                                        <i class="fas fa-clock"></i> <%= question.time_limit %>s
                                        <i class="fas fa-star ms-3"></i> <%= question.points %> points
                                    </small>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div class="text-center py-5">
                            <div class="display-1 text-muted mb-4">
                                <i class="fas fa-question-circle"></i>
                            </div>
                            <h3>No Questions Yet</h3>
                            <p class="lead">Add some questions to get started!</p>
                            <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#addQuestionModal">
                                Add First Question
                            </button>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Game Settings -->
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Game Settings</h3>
                </div>
                <div class="card-body">
                    <form id="gameSettingsForm">
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        <div class="mb-3">
                            <label class="form-label">Default Time Limit</label>
                            <div class="input-group">
                                <input type="number" class="form-control" name="default_time" 
                                       value="20" min="5" max="120">
                                <span class="input-group-text">seconds</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Default Points</label>
                            <div class="input-group">
                                <input type="number" class="form-control" name="default_points" 
                                       value="1000" min="100" max="10000" step="100">
                                <span class="input-group-text">points</span>
                            </div>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">
                                Save Settings
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Question Modal -->
<div class="modal fade" id="questionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="questionForm">
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                    <input type="hidden" name="question_id" id="questionId">
                    
                    <div class="mb-3">
                        <label class="form-label">Question</label>
                        <textarea class="form-control" name="content" rows="2" required></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Correct Answer</label>
                        <input type="text" class="form-control" name="correct_answer" required>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Incorrect Answers</label>
                        <div class="incorrect-answers">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" name="incorrect_answers[]" required>
                                <button type="button" class="btn btn-outline-danger remove-answer">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-primary btn-sm add-answer">
                            <i class="fas fa-plus"></i> Add Another Answer
                        </button>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Time Limit</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" name="time_limit" 
                                           value="20" min="5" max="120">
                                    <span class="input-group-text">seconds</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Points</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" name="points" 
                                           value="1000" min="100" max="10000" step="100">
                                    <span class="input-group-text">points</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="questionForm" class="btn btn-primary">Save Question</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Question Modal -->
<div class="modal fade" id="deleteQuestionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this question? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

<%- contentFor('extraCss') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<style>
.game-pin {
    font-family: monospace;
    font-size: 1.5em;
    letter-spacing: 0.1em;
}
</style>

<%- contentFor('extraJs') %>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const questionModal = new bootstrap.Modal(document.getElementById('questionModal'));
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteQuestionModal'));
    let currentQuestionId = null;

    // Add incorrect answer field
    document.querySelector('.add-answer').addEventListener('click', () => {
        const container = document.querySelector('.incorrect-answers');
        const newField = document.createElement('div');
        newField.className = 'input-group mb-2';
        newField.innerHTML = `
            <input type="text" class="form-control" name="incorrect_answers[]" required>
            <button type="button" class="btn btn-outline-danger remove-answer">
                <i class="fas fa-times"></i>
            </button>
        `;
        container.appendChild(newField);
    });

    // Remove incorrect answer field
    document.querySelector('.incorrect-answers').addEventListener('click', (e) => {
        if (e.target.closest('.remove-answer')) {
            const field = e.target.closest('.input-group');
            field.remove();
        }
    });

    // Edit question
    document.querySelectorAll('.edit-question').forEach(btn => {
        btn.addEventListener('click', () => {
            const data = btn.dataset;
            document.querySelector('#questionId').value = data.questionId;
            document.querySelector('[name="content"]').value = data.content;
            document.querySelector('[name="correct_answer"]').value = data.correct;
            document.querySelector('[name="time_limit"]').value = data.time;
            document.querySelector('[name="points"]').value = data.points;

            const incorrectAnswers = JSON.parse(data.incorrect);
            const container = document.querySelector('.incorrect-answers');
            container.innerHTML = '';
            incorrectAnswers.forEach(answer => {
                const field = document.createElement('div');
                field.className = 'input-group mb-2';
                field.innerHTML = `
                    <input type="text" class="form-control" name="incorrect_answers[]" value="${answer}" required>
                    <button type="button" class="btn btn-outline-danger remove-answer">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                container.appendChild(field);
            });

            questionModal.show();
        });
    });

    // Delete question
    document.querySelectorAll('.delete-question').forEach(btn => {
        btn.addEventListener('click', () => {
            currentQuestionId = btn.dataset.questionId;
            deleteModal.show();
        });
    });

    // Handle question form submission
    document.getElementById('questionForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = {
            content: formData.get('content'),
            correct_answer: formData.get('correct_answer'),
            incorrect_answers: [...formData.getAll('incorrect_answers[]')],
            time_limit: parseInt(formData.get('time_limit')),
            points: parseInt(formData.get('points')),
            _csrf: formData.get('_csrf')
        };

        const questionId = formData.get('question_id');
        const url = questionId ? 
            `/game/<%= game.pin %>/questions/${questionId}` : 
            `/game/<%= game.pin %>/questions`;

        try {
            const response = await fetch(url, {
                method: questionId ? 'PUT' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to save question');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to save question');
        }
    });

    // Handle question deletion
    document.getElementById('confirmDelete').addEventListener('click', async () => {
        if (!currentQuestionId) return;

        try {
            const response = await fetch(`/game/<%= game.pin %>/questions/${currentQuestionId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': '<%= csrfToken %>'
                }
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to delete question');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete question');
        }
    });

    // Handle game settings form
    document.getElementById('gameSettingsForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = {
            default_time: parseInt(formData.get('default_time')),
            default_points: parseInt(formData.get('default_points')),
            _csrf: formData.get('_csrf')
        };

        try {
            const response = await fetch(`/game/<%= game.pin %>/settings`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                alert('Settings saved successfully');
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to save settings');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to save settings');
        }
    });
});
</script>
